---
title: "nba-stats"
author: "Jeffrey Ding"
format: html
---

```{r}
library(tidyverse)
library(lubridate)
```


```{r}
# cleaning the data
player_stats <- read.csv("PlayerStatistics.csv")
players <- read.csv("Players.csv")

temp = players |> select(personId, height, bodyWeight, guard, forward, center, draftYear)

stats = merge(player_stats, temp, by="personId") |>
  arrange(personId, gameDate) |> 
  mutate("minutes" = numMinutes) |>
  mutate(fullName = paste(firstName, lastName)) |>
  mutate(position = case_when(
    guard == "True" & forward == "False" & center == "False" ~ "guard",
    guard == "True" & forward == "True" & center == "False" ~ "guard/forward",
    guard == "True" & forward == "False" & center == "True" ~ "guard/center",
    guard == "True" & forward == "True" & center == "True" ~ "guard/forward/center",
    guard == "False" & forward == "True" & center == "False" ~ "forward",
    guard == "False" & forward == "True" & center == "True" ~ "forward/center",
    guard == "False" & forward == "False" & center == "True" ~ "center",
    is.na(guard) & is.na(forward) & is.na(center) ~ NA_character_,
    TRUE ~ NA_character_
  )) |> 
  select(-guard, -forward, -center, -gameSubLabel) |>
  filter(gameType != "Preseason")

# converts win and home columns to booleans
stats = stats |>
  mutate(
    win = as.logical(win),
    home = as.logical(home)
  )

# adds the NBA season game data is from
stats = stats |>
  mutate(gameDate = ymd(str_sub(gameDate, 1, str_locate(gameDate, " ")[,1]-1))) %>%
  mutate(
    gameSeason = case_when(
      gameDate >= ymd("2019-10-22") & gameDate <= ymd("2020-10-11") ~ 2020,  # 2019-2020 bubble season
      gameDate >= ymd("2020-12-22") & gameDate <= ymd("2021-07-20") ~ 2021,  # 2020-2021 late start due to Bubble
      gameDate >= ymd("2011-12-25") & gameDate <= ymd("2012-06-21") ~ 2012,  # 2011-2012 lockout season

      month(gameDate) >= 10 ~ year(gameDate) + 1,
      TRUE ~ year(gameDate)),
  )

# reformats all undrafted players into one value
stats = stats |> 
  group_by(personId) |>
  mutate(draftYear = case_when(
    is.na(draftYear) | draftYear < 0 ~ min(gameSeason, na.rm=TRUE) - 1, 
    TRUE ~ draftYear
  )) |>
  ungroup()

# adds true shooting percentage, effective field goal percentage
stats = stats |> 
  mutate(
    trueShootingPercentage = case_when(
      is.na(minutes) ~ NA,
      !is.na(minutes) ~ points / (2*(fieldGoalsAttempted + (0.44*freeThrowsAttempted)))
    ),
    effectiveFGPercentage = case_when(
      is.na(minutes) ~ NA,
      !is.na(minutes) ~ (fieldGoalsMade + (0.5*threePointersMade)) / fieldGoalsAttempted
    )
  )

stats = stats[, c("personId",
  "firstName",
  "lastName",
  "fullName",
  "position",
  "height",
  "bodyWeight",
  "draftYear",
  "gameId",
  "gameSeason",
  "gameDate",
  "playerteamCity",
  "playerteamName",
  "opponentteamCity",
  "opponentteamName",
  "gameType",
  "gameLabel",
  "seriesGameNumber",
  "home",
  "win",
  "minutes",
  "points",
  "reboundsDefensive",
  "reboundsOffensive",
  "reboundsTotal",
  "assists",
  "steals",
  "blocks",
  "turnovers",
  "foulsPersonal",
  "fieldGoalsMade",
  "fieldGoalsAttempted",
  "fieldGoalsPercentage",
  "threePointersMade",
  "threePointersAttempted",
  "threePointersPercentage",
  "freeThrowsMade",
  "freeThrowsAttempted",
  "freeThrowsPercentage",
  "trueShootingPercentage",
  "effectiveFGPercentage",
  "plusMinusPoints")]

# cumulative stats
stats = stats |> 
  group_by(personId) |> 
  mutate(
    careerGamesPlayed = cumsum(!is.na(minutes)),
    careerGamesPlayed = ifelse(is.na(minutes), lag(careerGamesPlayed), careerGamesPlayed)
    ) |> 
  ungroup()

# drops players drafted at least 2 years ago with less than 10 games played
stats = stats |> 
  mutate(careerGamesPlayed = replace_na(careerGamesPlayed, 0)) |>
  group_by(personId) |> 
  filter(!(draftYear <= 2022 & max(careerGamesPlayed, na.rm = TRUE) < 10)) |> 
  ungroup()

write.csv(stats, "stats.csv")
```

```{r}
# data frame cut down for the published app
clean <- read.csv("stats.csv") |>
  group_by(personId) |>
  mutate(totalMins = sum(minutes, na.rm=TRUE)) |>
  ungroup() |>
  filter((draftYear >= 2013) | (totalMins >= 20000)) |>
  select(-totalMins)

write_csv(clean, "recent_stats.csv")
```


```{r}
# function to calculate cumulative stats (rolling totals)
cumulative_stat_sum = function(df, stat) {
  df <- df |>
    mutate(
      temp_col1 = cumsum(ifelse(!is.na(!!sym(stat)), !!sym(stat), 0)),
      temp_col1 = ifelse(is.na(!!sym(stat)), lag(temp_col1), temp_col1)
    ) |>
    mutate(temp_col2 = temp_col1 / careerGamesPlayed)
  
  colnames(df)[colnames(df) == "temp_col1"] <- paste0("career", toupper(str_sub(stat, 1, 1)), str_sub(stat, 2, nchar(stat)))
  colnames(df)[colnames(df) == "temp_col2"] <- paste0(stat, "PerGame")
  
  return(df)
}
```

```{r}
# run if you would like to automatically add all cumulative stats to your data frame (might make things run slow)
counting_stats <- c("points", "reboundsTotal", "assists", "steals", "blocks", "turnovers",
                    "fieldGoalsMade", "fieldGoalsAttempted", "threePointersMade", "threePointersAttempted", "freeThrowsMade", "freeThrowsAttempted")

for (stat in counting_stats) {
  stats <- cumulative_stat_sum(stats, stat)
}
```